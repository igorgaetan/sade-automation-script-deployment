name: Sync Repositories

on:
  push:
    branches:
      - dev  # Déclencher la synchronisation lors d'un push sur la branche main

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Cloner le dépôt courant
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TARGET_REPO_TOKEN }}  # Utilisez le token GitHub par défaut

      # Étape 2 : Configurer Git
      - name: Configure Git
        run: |
          git config --global user.name "igorgaetan"
          git config --global user.email "igorkwenja@github.com"

      # Étape 3 : Ajouter le dépôt cible comme remote
      - name: Add target repository as remote
        run: |
          git remote add target https://${{ secrets.TARGET_REPO_TOKEN }}@github.com/igorgaetan/sade-automation-script-deployment.git
          git fetch target

      # Étape 4 : Récupérer les modifications du dépôt cible
      - name: Fetch latest changes from target repository
        run: |
          git fetch target
          git checkout dev

      # Étape 5 : Identifier les fichiers conflictuels
      - name: Detect conflicted files
        id: detect_conflicts
        run: |
          git pull target main --rebase || true
          CONFLICTED_FILES=$(git diff --name-only --diff-filter=U)
          if [ -n "$CONFLICTED_FILES" ]; then
            echo "Conflicts detected in the following files:"
            echo "$CONFLICTED_FILES"
            # Convertir la liste des fichiers en une chaîne séparée par des virgules
            CONFLICTED_FILES_CSV=$(echo "$CONFLICTED_FILES" | tr '\n' ',')
            echo "::set-output name=conflicted_files::$CONFLICTED_FILES_CSV"
          else
            echo "No conflicts detected."
            echo "::set-output name=conflicted_files::"
          fi

      # Étape 6 : Construire et exécuter le conteneur Docker pour effacer tout le dépôt
      - name: Run Docker container to clear repository
        if: steps.detect_conflicts.outputs.conflicted_files != ''
        env:
          GIT_TOKEN: ${{ secrets.TARGET_REPO_TOKEN }}  # Token d'accès pour le dépôt cible
        run: |
          # Construire l'image Docker
          docker build -t git-cleanup .

          # Construire l'URL du dépôt avec le token
          REPO_URL_WITH_TOKEN="https://$GIT_TOKEN@github.com/igorgaetan/sade-automation-script-deployment.git"

          # Exécuter le conteneur Docker pour effacer tout le dépôt
          docker run --rm \
            -e GIT_TOKEN="$GIT_TOKEN" \
            git-cleanup \
            "$REPO_URL_WITH_TOKEN" main

      # Étape 6.5 : Ajouter une latence de 10 secondes
      - name: Wait for 10 seconds
        if: steps.detect_conflicts.outputs.conflicted_files != ''
        run: |
          sleep 10

      # Étape 7 : Forcer la mise à jour complète du dépôt distant avec la version locale
      - name: Force sync local repository to target
        run: |
          git rebase --abort || true  # Annuler tout rebasage en cours
          rm -fr .git/rebase-merge || true  # Nettoyer le répertoire de rebasage si nécessaire
          git pull target main --rebase  # Récupérer les dernières modifications avant de pousser
          git push target dev:main --force
